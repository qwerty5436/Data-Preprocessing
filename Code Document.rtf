{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fmodern JetBrains Mono;}{\f1\fnil\fcharset0 Calibri;}}
{\colortbl ;\red0\green0\blue128;\red0\green0\blue0;\red128\green128\blue128;\red0\green128\blue0;\red102\green0\blue153;\red0\green0\blue255;\red255\green255\blue255;}
{\*\generator Riched20 10.0.19041}\viewkind4\uc1 
\pard\box\brdrdash\brdrw0 \cbpat7\ri-307\sa200\sl240\slmult1\tx9230\cf1\b\f0\fs20\lang9 import \cf2\b0 numpy \cf1\b as \cf2\b0 np     \cf3\i #\line\cf1\b\i0 import \cf2\b0 os              \cf3\i #\line\cf1\b\i0 import \cf2\b0 cv2             \cf3\i # Importing all required libraries\line\cf1\b\i0 import \cf2\b0 csv             \cf3\i #\line\cf1\b\i0 import \cf2\b0 pydicom         \cf3\i #\line\cf1\b\i0 import \cf2\b0 time            \cf3\i #\line\line\cf2\i0 st = time.time()    \cf3\i # This is start time\line\line\cf2\i0 dicom_path = \cf4\b "C:/intern/New folder/avi/DICOM"  \cf3\b0\i # This is input folder from which dicom files are to be taken\line\cf2\i0 output_path = \cf4\b "C:/intern/echo"    \cf3\b0\i # Output folder\line\line\cf1\b\i0 if not \cf2\b0 os.path.exists(output_path + \cf4\b "/frames"\cf2\b0 ):     \cf3\i # If the specified path is not existed\line     \cf2\i0 os.mkdir(output_path + \cf4\b "/frames"\cf2\b0 )            \cf3\i # We are creating that directory\line\cf1\b\i0 if not \cf2\b0 os.path.exists(output_path + \cf4\b "/womframes"\cf2\b0 ):  \cf3\i #\line     \cf2\i0 os.mkdir(output_path + \cf4\b "/womframes"\cf2\b0 )            \cf3\i #     Creating 5 folders in output folder\line\cf1\b\i0 if not \cf2\b0 os.path.exists(output_path + \cf4\b "/video"\cf2\b0 ):      \cf3\i #   5 folders are\line     \cf2\i0 os.mkdir(output_path + \cf4\b "/video"\cf2\b0 )                \cf3\i #       frames = folder that contains full sized frames\line\cf1\b\i0 if not \cf2\b0 os.path.exists(output_path + \cf4\b "/womvideo"\cf2\b0 ):   \cf3\i #       womframes = folder that contains cropped frames, i.e without any marking(wom)\line     \cf2\i0 os.mkdir(output_path + \cf4\b "/womvideo"\cf2\b0 )             \cf3\i #       video =  folder that contains video with full sized frames\line\cf1\b\i0 if not \cf2\b0 os.path.exists(output_path + \cf4\b "/csvfiles"\cf2\b0 ):   \cf3\i #       womvideo = folder that contains video with cropped frames\line     \cf2\i0 os.mkdir(output_path + \cf4\b "/csvfiles"\cf2\b0 )             \cf3\i #       csvfiles =  folder that contains csv files which contain information about each dicom file\line\line\cf2\i0 dicom_list = os.listdir(dicom_path)    \cf3\i # dicom_list = List that contains all the dicoms present in input folder\line\cf2\i0 dicom_list = \cf1 sorted\cf2 (dicom_list)    \cf3\i #    Sorting them in alphabetical order\line\cf1\i0 print\cf2 (dicom_list)       \cf3\i # Printing the names of dicom files and to check if the files are correct\line\cf2\i0 lent = \cf1 len\cf2 (dicom_list)   \cf3\i # No.of dicom files present in input folder\line\cf1\b\i0 for \cf2\b0 j \cf1\b in \b0 range\cf2 (lent):      \cf3\i # for loop executes "lent" times\line     \cf2\i0 filename = os.path.join(dicom_path, dicom_list[j])   \cf3\i # Joining dicom_path and name of each dicom file to get directory of each dicom file\line     \cf2\i0 ds = pydicom.dcmread(filename, \cf5 force\cf2 =\cf1\b True\cf2\b0 )   \cf3\i # Reading the contents of dicom file and storing in variable 'ds'\line     \cf2\i0 arr = ds.pixel_array  \cf3\i # Pixel_array function extract data from tag "Pixel Data" in 'ds' and converts into readable form\line     \cf2\i0 arr_frames = np.array(arr)  \cf3\i # Converting arr to a numpy array\line\line     \cf1\b\i0 with \b0 open\cf2 (\cf4\b 'C:/intern/echo/csvfiles/csvfile_%d.csv' \cf2\b0 % j, \cf4\b 'w'\cf2\b0 , \cf5 newline\cf2 =\cf4\b ''\cf2\b0 ) \cf1\b as \cf2\b0 csvfile:   \cf3\i # Opening csv file in write mode\line         \cf2\i0 writer = csv.writer(csvfile)   \cf3\i # We use csv.writer class to insert data into csv file\line         \cf2\i0 writer.writerow(\cf4\b "Tag Description VR value"\cf2\b0 .split())   \cf3\i # To write a single row in csv file\line         \cf1\b\i0 for \cf2\b0 elem \cf1\b in \cf2\b0 ds:                                                     \cf3\i #\line             \cf2\i0 writer.writerow(\{                                               \cf3\i #\line                 \cf2\i0 elem.tag, elem.description(), elem.VR, \cf1 str\cf2 (elem.value)      \cf3\i #   storing data into csv file\line             \cf2\i0\})\line     \cf1\b try\cf2\b0 :\line         \cf1 print\cf2 (ds[\cf6 0x0028\cf2 , \cf6 0x0008\cf2 ])      \cf3\i # This tag contains no of frames\line         \cf1\b\i0 if not \cf2\b0 os.path.exists(output_path + \cf4\b "/frames/dcmfile_%d" \cf2\b0 % j):  \cf3\i #  Creating folder for each dicom file to save\line             \cf2\i0 os.mkdir(output_path + \cf4\b "/frames/dcmfile_%d" \cf2\b0 % j)            \cf3\i #  frames extracted from ds\line         \cf2\i0 marked_frame_dir = (output_path + \cf4\b "/frames/dcmfile_%d" \cf2\b0 % j)     \cf3\i #  marked_frame_dir is directory of each such folder\line         \cf1\b\i0 if not \cf2\b0 os.path.exists(os.path.join(output_path, \cf4\b "womframes/wmdcmfile_%d" \cf2\b0 % j)): \cf3\i #  Creating folder to save\line             \cf2\i0 os.mkdir(os.path.join(output_path, \cf4\b "womframes/wmdcmfile_%d" \cf2\b0 % j))           \cf3\i #  cropped frames from ds\line         \cf2\i0 unmarked_frame_dir = (os.path.join(output_path, \cf4\b "womframes/wmdcmfile_%d" \cf2\b0 % j))\line         \cf1 print\cf2 (marked_frame_dir)\line         img_arr = []     \cf3\i # Creating empty array to store uncropped frames\line         \cf2\i0 img_array = []   \cf3\i # Creating empty array to store cropped frames\line         \cf1\b\i0 for \cf2\b0 i \cf1\b in \b0 range\cf2 (\cf1 len\cf2 (arr_frames)):\line             image = pydicom.pixel_data_handlers.convert_color_space(arr_frames[i], \cf4\b 'YBR_FULL_422'\cf2\b0 , \cf4\b 'RGB'\cf2\b0 )   \cf3\i # Changing colour space of each frame\line             \cf2\i0 cv2.imwrite(os.path.join(marked_frame_dir, \cf4\b "frame%d.jpg" \cf2\b0 % i), image) \cf3\i # Saving the image in specified directory\line             \cf2\i0 height, width, layer = image.shape  \cf3\i # .shape returns height, width, layers of an image\line             \cf2\i0 size1 = (width, height)\line             img_arr.append(image)\line\line             img = image.copy()      \cf3\i # img is a copy of image\line             \cf2\i0 img = img[\cf6 70\cf2 :\cf6 580\cf2 , \cf6 230\cf2 :\cf6 660\cf2 ]   \cf3\i # Determining the coordinates to which img is to be cropped\line             \cf2\i0 cv2.imwrite(os.path.join(unmarked_frame_dir, \cf4\b "wmframe_%d.jpg" \cf2\b0 % i), img) \cf3\i # Saving the image in specified directory\line             \cf2\i0 height, width, layes = img.shape \cf3\i # .shape returns height, width, layers of an image\line             \cf2\i0 size2 = (width, height)\line             img_array.append(img) \cf3\i # Appending all the frames into img_array\line         \cf2\i0 vid_full = cv2.VideoWriter(os.path.join(output_path, \cf4\b "video/avivideo_%d.avi" \cf2\b0 % j), cv2.VideoWriter_fourcc(*\cf4\b 'DIVX'\cf2\b0 ),\line                               \cf6 15\cf2 , size1)   \cf3\i # saving the video made from full sized frames\line\line         \cf1\b\i0 for \cf2\b0 q \cf1\b in \b0 range\cf2 (\cf1 len\cf2 (img_arr)):\line             vid_full.write(img_arr[q])      \cf3\i # Inserting each frame into video\line         \cf2\i0 vid_full.release()\line\line         vid = cv2.VideoWriter(os.path.join(output_path, \cf4\b "womvideo/avivideo_%d.avi" \cf2\b0 % j), cv2.VideoWriter_fourcc(*\cf4\b 'DIVX'\cf2\b0 ),\line                               \cf6 15\cf2 , size2)    \cf3\i # saving the video from cropped frames\line\line         \cf1\b\i0 for \cf2\b0 k \cf1\b in \b0 range\cf2 (\cf1 len\cf2 (img_array)):\line             vid.write(img_array[k])  \cf3\i # Inserting each frame into video\line         \cf2\i0 vid.release()\line\line\line\line     \cf1\b except \b0 KeyError\cf2 :   \cf3\i # Control comes here when try loop returns any error\line         \cf1\b\i0 if not \cf2\b0 os.path.exists(output_path + \cf4\b "/frames/dcmfile_%d" \cf2\b0 % j):  \cf3\i #\line             \cf2\i0 os.mkdir(output_path + \cf4\b "/frames/dcmfile_%d" \cf2\b0 % j)            \cf3\i # Creating folder for each dicom file\line         \cf2\i0 path2 = (output_path + \cf4\b "/frames/dcmfile_%d" \cf2\b0 % j)                \cf3\i # to save single frame images\line         \cf1\i0 print\cf2 (path2)\line         cv2.imwrite(os.path.join(path2, \cf4\b "sinle_frame_%d.jpg" \cf2\b0 % j), arr_frames)  \cf3\i # Saving the images\line\line\cf2\i0 et = time.time()   \cf3\i # This is end time\line\cf2\i0 time_elapsed = et - st   \cf3\i # Total runtime\line\line\cf1\i0 print\cf2 (\cf4\b "Time elapsed = " \cf2\b0 + \cf1 str\cf2 (time_elapsed) + \cf4\b " sec"\cf2\b0 )\line\par

\pard\ri-1080\sa200\sl276\slmult1\tx9720\cf0\f1\fs22\par
}
 